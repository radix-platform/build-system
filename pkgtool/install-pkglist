#!/bin/sh
: ${DIALOG=dialog}

TAR=tar

# program name:
program=`basename $0`

# 13 = permission denied (should be root)
# 14 = there is no '.pkglist' file
# 16 = root path has not specified arter --root option
# 92 = Cannot create '/tmp/...' directory
# 99 = user abort from checklist mode
EXITSTATUS=0

CWD=`pwd`

umask 022
if [ ! -z "$TMPDIR" ] ; then mkdir -p $TMPDIR ; fi
TMP=$(mkdir -p /tmp/radix && mktemp -d -p /tmp/radix pkgtool.XXXXXXXX) || { echo "Cannot create '/tmp/...' directory" ; exit 92; }
trap "rm -rf $TMP" EXIT


usage() {
 cat << EOF

Usage: cd /pkg_tarballs_dir; $program

$program is used to install the set of packages using using '.pkglist' file
which placed  in the current directory.  The file '.pkglist' may be created
by make-pkglist utility.

options:
   --root /dest    - install someplace else, like /dest .
   --skip-requires - skip checking required packages;

EOF
}


#
# Parse options:
#
while [ 0 ]; do
  if [ "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
  elif [ "$1" = "--skip-requires" ]; then
    SKIPREQUIRES="yes"
    shift 1
  elif [ "$1" = "--root" ]; then
    if [ "$2" = "" ]; then
      usage
      echo "ERROR: Target root path has not specified. Check --root option."
      EXITSTATUS=16
      exit $EXITSTATUS
    fi
    TARGET_ROOT_PATH="$2"
    shift 2
  else
    break
  fi
done

if [ "$TARGET_ROOT_PATH" = "" ]; then
  TARGET_ROOT_PATH="/"
else
  TARGET_ROOT_PATH="`echo "$TARGET_ROOT_PATH" | sed -e "s/\/$//"`/"
fi

if [ "$TARGET_ROOT_PATH" = "/" ]; then
  if [ ! $UID = "0" ]; then
    echo "ERROR: Trying to install into root directory: permission denied"
    EXITSTATUS=13
    exit $EXITSTATUS
  fi
fi

if [ ! -f $CWD/.pkglist ]; then
  echo "ERROR: There is no '.pkglist' file in the current directory."
  EXITSTATUS=14
  exit $EXITSTATUS
else
  PKGLIST=$CWD/.pkglist
fi

probe=`find $CWD -name "*.txz" > /dev/null 2>&1`
if [ ! "$?" = "0" ]; then
  usage
  echo "WARNING: There are not package tarballs in current directory."
  echo ""
  exit 0
fi

cat > $TMP/pkglst$$ << EOF
--colors \\
--backtitle "\Z7Radix\Zn \Z1Pro\Zn\Z7, Ltd.\Zn" \\
--title " \Z4SELECTING PACKAGES TO INSTALL\Zn " \\
--checklist "\\n\\
Please confirm the packages  you wish to install.  Use the UP/DOWN\\n\\
keys to scroll through the list, and the SPACE key to deselect any\\n\\
items you don't want to install.\\n\\n\\
Press ENTER when you are done." \\
15 74 3 \\
EOF

# read lines from '$PKGLIST' file in original order:
LINENUMS=`sed -n "$=" $PKGLIST | tr '\n' '\0'`
LINENUM_REQ=1
while [ "$LINENUM_REQ" -le "$LINENUMS" ]; do
  LINE="`sed -n "$LINENUM_REQ p" $PKGLIST | tr '\n' '\0'`"
  let LINENUM_REQ+=1
  if [ ! -z "$LINE" -a -z "`echo $LINE | grep -n -e '^#' | cut -f 1 -d ':'`" ]; then
    pnam=`echo "$LINE" | cut -f 1 -d ':'`
    pver=`echo "$LINE" | cut -f 2 -d ':'`
    pdir=`dirname $(echo "$LINE" | cut -f 4 -d ':')`
    proc=`echo "$LINE" | cut -f 5 -d ':'`
    # version    - is used to avoid errors related equal substring in packagenames
    # packagedir - is used to recognize same packages in different directories
    if [ ! -z "$pdir" -a "$pdir" != "." ] ; then
      pkgtarball=`find $CWD/$pdir -name "$pnam-$pver-*.txz"`
    else
      pkgtarball=`find $CWD -name "$pdir/$pnam-$pver-*.txz"`
    fi
    pkgtarball=`echo $pkgtarball | sed s,$CWD/,,`
    if [ ! -z "$pnam" -a -f $pkgtarball ]; then
      desc="`echo $LINE | cut -f 3 -d ':'`"
      prio="`echo $LINE | cut -f 6 -d ':' | tr '\n' '\0'`"
      if   [ "$prio" = "required"    -o "$prio" = "req" -o "$prio" = "REQUIRED"    -o "$prio" = "REQ" ]; then
        ret="REQUIRED"
      elif [ "$prio" = "recommended" -o "$prio" = "rec" -o "$prio" = "RECOMMENDED" -o "$prio" = "REC" ]; then
        ret="RECOMMENDED"
      elif [ "$prio" = "optional"    -o "$prio" = "opt" -o "$prio" = "OPTIONAL"    -o "$prio" = "OPT" ]; then
        ret="OPTIONAL"
      elif [ "$prio" = "skip"        -o "$prio" = "skp" -o "$prio" = "SKIP"        -o "$prio" = "SKP" ]; then
        prio="SKIP"
      fi
      if [ ! "$prio" = "REQUIRED" -a ! "$prio" = "RECOMMENDED" -a ! "$prio" = "OPTIONAL" -a ! "$prio" = "SKIP" ]; then
        prio="SKIP"
      fi
      if [ "$prio" = "SKIP" ]; then
        continue
      fi

      if [ "$proc" = "update" ] ; then
        echo -n "\"$pnam UPDATE\" " >> $TMP/pkglst$$
      else
        echo -n "\"$pnam\" " >> $TMP/pkglst$$
      fi
      echo -n "\"$desc\" " >> $TMP/pkglst$$
      if [ "$prio" = "OPTIONAL" ]; then
        echo "off \\" >> $TMP/pkglst$$
      else
        echo "on  \\" >> $TMP/pkglst$$
      fi

    fi
  fi
done

# remove last '\' symbol
cat $TMP/pkglst$$ | sed -e "$ s/[:\\:]//" > $TMP/pkglist$$

$DIALOG --file $TMP/pkglist$$ 2> $TMP/setofpkgs$$
if [ $? = 1 -o $? = 255 ]; then
  > $TMP/newpkglist$$
  # read lines from '$PKGLIST' file in original order:
  LINENUMS=`sed -n "$=" $PKGLIST | tr '\n' '\0'`
  LINENUM_REQ=1
  while [ "$LINENUM_REQ" -le "$LINENUMS" ]; do
    LINE="`sed -n "$LINENUM_REQ p" $PKGLIST | tr '\n' '\0'`"
    let LINENUM_REQ+=1
    if [ ! -z "$LINE" -a -z "`echo $LINE | grep -n -e '^#' | cut -f 1 -d ':'`" ]; then
      pnam="`echo "$LINE" | cut -f 1 -d ':'`"
      pver="`echo "$LINE" | cut -f 2 -d ':'`"
      desc="`echo "$LINE" | cut -f 3 -d ':'`"
      ball="`echo "$LINE" | cut -f 4 -d ':'`"
      proc="`echo "$LINE" | cut -f 5 -d ':'`"
      echo -n "$pnam:$pver:$desc:$ball:$proc:" >> $TMP/newpkglist$$
      echo "SKIP" >> $TMP/newpkglist$$
    fi
  done
else
  > $TMP/newpkglist$$
  # read lines from '$PKGLIST' file in original order:
  LINENUMS=`sed -n "$=" $PKGLIST | tr '\n' '\0'`
  LINENUM_REQ=1
  while [ "$LINENUM_REQ" -le "$LINENUMS" ]; do
    LINE="`sed -n "$LINENUM_REQ p" $PKGLIST | tr '\n' '\0'`"
    let LINENUM_REQ+=1
    if [ ! -z "$LINE" -a -z "`echo $LINE | grep -n -e '^#' | cut -f 1 -d ':'`" ]; then
      pnam="`echo "$LINE" | cut -f 1 -d ':'`"
      pver="`echo "$LINE" | cut -f 2 -d ':'`"
      desc="`echo "$LINE" | cut -f 3 -d ':'`"
      ball="`echo "$LINE" | cut -f 4 -d ':'`"
      proc="`echo "$LINE" | cut -f 5 -d ':'`"
      echo -n "$pnam:$pver:$desc:$ball:$proc:" >> $TMP/newpkglist$$
      if [ "$proc" = "update" ] ; then
        if grep -e "\"$pnam UPDATE\"$" -e "\"$pnam UPDATE\"[[:space:]]" $TMP/setofpkgs$$ 1> /dev/null 2> /dev/null ; then
          echo "REQUIRED" >> $TMP/newpkglist$$
        else
          echo "SKIP" >> $TMP/newpkglist$$
        fi
      else
        if grep -e "$pnam$" -e "$pnam[[:space:]]" $TMP/setofpkgs$$ 1> /dev/null 2> /dev/null ; then
          echo "REQUIRED" >> $TMP/newpkglist$$
        else
          echo "SKIP" >> $TMP/newpkglist$$
        fi
      fi
    fi
  done
fi
rm -f $TMP/setofpkgs$$
rm -f $TMP/pkglist$$
rm -f $TMP/pkglst$$

# Exit if nothing was requested:
if grep REQUIRED $TMP/newpkglist$$ 1> /dev/null 2> /dev/null ; then
  true
else
  rm -f $TMP/newpkglist$$
  exit 99 # ABORT (there are not sellected packeges)!
fi

OPTIONS=
if [ "$SKIPREQUIRES" = "yes" ]; then
  OPTIONS="--skip-requires $OPTIONS"
fi

# tarballs from '$PKGLIST' file in original order:
PKGS=
LINENUMS=`sed -n "$=" $TMP/newpkglist$$ | tr '\n' '\0'`
LINENUM_REQ=1
while [ "$LINENUM_REQ" -le "$LINENUMS" ]; do
  LINE="`sed -n "$LINENUM_REQ p" $TMP/newpkglist$$ | tr '\n' '\0'`"
  let LINENUM_REQ+=1
  if [ ! -z "$LINE" -a -z "`echo $LINE | grep -n -e '^#' | cut -f 1 -d ':'`" ]; then
    pnam=`echo "$LINE" | cut -f 1 -d ':'`
    pver=`echo "$LINE" | cut -f 2 -d ':'`
    pdir=`dirname $(echo "$LINE" | cut -f 4 -d ':')`
    proc=`echo "$LINE" | cut -f 5 -d ':'`
    # version    - is used to avoid errors related equal substring in packagenames
    # packagedir - is used to recognize same packages in different directories
    if [ ! -z "$pdir" -a "$pdir" != "." ] ; then
      pkgtarball=`find $CWD/$pdir -name "$pnam-$pver-*.txz"`
    else
      pkgtarball=`find $CWD -name "$pdir/$pnam-$pver-*.txz"`
    fi
    pkgtarball=`echo $pkgtarball | sed s,$CWD/,,`
    if [ ! -z "$pnam" -a -f $pkgtarball ]; then
      # newpkglist required only for saving order of installation,
      # package priority will be set directly by command line arguments:
      if [ "$proc" = "update" ] ; then
        update-package $OPTIONS --root $TARGET_ROOT_PATH --infodialog --priority REQUIRED $pkgtarball
      else
        install-package $OPTIONS --root $TARGET_ROOT_PATH --infodialog --priority REQUIRED $pkgtarball
      fi
    fi
  fi
done

rm -f $TMP/newpkglist$$

$DIALOG --sleep 1 --colors \
        --backtitle "\Z7Radix\Zn \Z1Pro\Zn\Z7, Ltd.\Zn" \
        --title " \Z4Installing packages\Zn " \
        --infobox "\nInstalling packages is completed.\n" 5 74

exit $EXITSTATUS
