#!/bin/sh

TAR=tar

# program name:
program=`basename $0`

#  1 = tar returned error code
#  2 = failed read package info
#  3 = does not end in .txz
#  4 = not a file
# 11 = broken .PKGINFO
# 14 = broken declaration of user pkglist
# 15 = priority has not specified arter --priority option
# 92 = Cannot create '/tmp/...' directory
# 99 = user abort from menu mode
EXITSTATUS=0

CWD=`pwd`

umask 022
if [ ! -z "$TMPDIR" ] ; then mkdir -p $TMPDIR ; fi
TMP=$(mkdir -p /tmp/radix && mktemp -d -p /tmp/radix pkgtool.XXXXXXXX) || { echo "Cannot create '/tmp/...' directory" ; exit 92; }
trap "rm -rf $TMP" EXIT


usage() {
 cat << EOF

Usage: cd /pkg_tarballs_dir; $program

$program is used to create '.pkglist' file by info is presented in package
tarballs which placed in the current directory.

options:
   --priority {required|recommended|optional|skip} -
                  provide a priority for the entire package list.
                  The default is "RECOMMENDED";
   --pkglist /path/file -
                  specify a different file to store the list.
                  The default is ".pkglist" in the current directory.

EOF
}

package_info() {
  xzcat $1 | $TAR -xvf - ".PKGINFO" -O  1> $TMP/pkginfo$$  2> /dev/null
  if [ ! "$?" = "0" ]; then
    echo "ERROR: Cannot extract package info from $1"
    EXITSTATUS=1
    exit $EXITSTATUS
  fi
  if [ -f "$TMP/pkginfo$$" ]; then
    . $TMP/pkginfo$$
    # check variables:
    if [ "$pkgname" = "" -o "$pkgver" = "" -o "$arch" = "" -o "$distroname" = "" -o "$distrover" = "" ]; then
      echo "ERROR: The file '.PKGINFO' doesn't contain necessary declarations."
      EXITSTATUS=11
      exit $EXITSTATUS 
    fi
  else
    echo "ERROR: There is no package info in $1"
    EXITSTATUS=2
    exit $EXITSTATUS
  fi
  rm -f $TMP/pkginfo$$
}


#
# Parse options:
#
while [ 0 ]; do
  if [ "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
  elif [ "$1" = "--pkglist" ]; then
    if [ "$2" = "" ]; then
      usage
      echo "ERROR: Wrong pkglist file name. Check --pkglist option."
      EXITSTATUS=14
      exit $EXITSTATUS
    fi
    PKGLIST="$2"
    shift 2
  elif [ "$1" = "--priority" ]; then
    if [ "$2" = "" ]; then
      usage
      echo "ERROR: Priority has not specified. Check --priority option."
      EXITSTATUS=15
      exit $EXITSTATUS
    fi
    PRIORITY="$2"
    if   [ "$PRIORITY" = "required"    -o "$PRIORITY" = "req" -o "$PRIORITY" = "REQUIRED" -o "$PRIORITY" = "REQ" ]; then
      PRIORITY="REQUIRED"
    elif [ "$PRIORITY" = "recommended" -o "$PRIORITY" = "rec" -o "$PRIORITY" = "RECOMMENDED" -o "$PRIORITY" = "REC" ]; then
      PRIORITY="RECOMMENDED"
    elif [ "$PRIORITY" = "optional"    -o "$PRIORITY" = "opt" -o "$PRIORITY" = "OPTIONAL" -o "$PRIORITY" = "OPT" ]; then
      PRIORITY="OPTIONAL"
    elif [ "$PRIORITY" = "skip"        -o "$PRIORITY" = "skp" -o "$PRIORITY" = "SKIP" -o "$PRIORITY" = "SKP" ]; then
      PRIORITY="SKIP"
    fi
    if [ ! "$PRIORITY" = "REQUIRED" -a ! "$PRIORITY" = "RECOMMENDED" -a ! "$PRIORITY" = "OPTIONAL" -a ! "$PRIORITY" = "SKIP" ]; then
      usage
      echo "ERROR: Invalid priority. Check --priority option."
      EXITSTATUS=15
      exit $EXITSTATUS
    fi
    shift 2
  else
    break
  fi
done

if [ "$PKGLIST" = "" ]; then
  PKGLIST=".pkglist"
fi

if [ "$PRIORITY" = "" ]; then
  PRIORITY="RECOMMENDED"
fi

probe=`find $CWD -name "*.txz" > /dev/null 2>&1`
if [ ! "$?" = "0" ]; then
  usage
  echo "WARNING: There are not package tarballs in current directory."
  echo ""
  exit 0
fi

  cat > $PKGLIST << EOF
#
# file format:
# ===========
#
# Each line contains six fields separated by colon symbol ':' like following.
#
# pkgname:version:description:tarball:procedure:priority
#
# where:
#
#   pkgname     - should be the same as the value of pkgname  in the '.DESCRIPTION' file;
#   version     - package version for showing in check list  dialog box  if this file is
#                 used to complete common check dialog for installing group  of packages;
#   description - short description for showing in check list dialog box if this file is
#                 used to complete common check dialog for installing  group of packages;
#   tarball     - should end in '.txz';
#   procedure   - installation procedure {install | update}:
#                  * 'install' - if package requires normal installation,
#                  * 'update'  - if already installed package should be updated by this
#                                package archive;
#   priority    - { REQUIRED|RECOMMENDED|OPTIONAL|SKIP }
#                  synonims:
#                    { REQUIRED    | required    | REQ | req }
#                    { RECOMMENDED | recommended | REC | rec }
#                    { OPTIONAL    | optional    | OPT | opt }
#                    { SKIP        | skip        | SKP | skp }
#
EOF

################################################################
# Main loop:
#
for pkgtarball in `find $CWD -name "*.txz"` ; do

  pkgtarball=`echo $pkgtarball | sed s,$CWD/,,`

  # Simple package integrity check:
  if [ ! -f $pkgtarball ]; then
    EXITSTATUS=4
    if [ "$MODE" = "console" ]; then
      echo "ERROR: $pkgtarball: tarball is not a regular file"
    fi
    continue;
  fi

  # getting pkgname, etc... variables from tarball:
  package_info $pkgtarball

  # optional declaration:
  if [ "$short_description" = "" ]; then
    short_description="There is no description"
  fi

  #
  # In Makefiles we have to mask characters '\', '&', '*', '(', ')' inside
  # the new value in the assignment operator with backslash. So, for axample,
  # the value "name & \ * ( ) end" we have to assign as follow
  #
  # ..._SHORT_DESCRIPTION = name \& \\ \* \( \) end
  #
  # Here we have to remove backslashes and fill escaped symbols as is:
  #
  echo -n  "$pkgname:$pkgver:"                         >> $PKGLIST
  echo -n   $short_description | sed "s,[\]\(.\),\1,g" >> $PKGLIST
  echo    ":$pkgtarball:install:$PRIORITY"             >> $PKGLIST

done
#
# End of Main loop.
################################################################

exit $EXITSTATUS
