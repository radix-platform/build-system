#!/bin/sh

TAR=tar

program=`basename $0`

# 92 = Cannot create '/tmp/...' directory

umask 022

TMP=$(mktemp -d /tmp/XXXXXXXX) || { echo "Cannot create '/tmp/...' directory" ; exit 92; }
trap "rm -rf $TMP" EXIT


check_link_permissions() {
  ERRCOUNT=0
  for link in `find . -type l` ; do
    user_name="`ls -l $link | grep -e "^l" | cut -f 3 -d ' '`"
    LINK_UID="`cat /etc/passwd | grep -e "^$user_name" | cut -f 3 -d ':'`"
    if [ ! "$LINK_UID" = "$UID" -a ! "$UID" = "0" ]; then
      # only root have permissions for all links
      # user chould have only his own links
      let ERRCOUNT+=1
    fi
  done
  if [ "$ERRCOUNT" = "0" ]; then
    return 1
  else
    return 0
  fi
}

make_install_script() {
  COUNT=1
  LINE="`sed -n "$COUNT p" $1`"
  while [ ! "$LINE" = "" ]; do
   LINKGOESIN="`echo "$LINE" | cut -f 1 -d " "`" 
   LINKGOESIN="`dirname $LINKGOESIN`" 
   LINKNAMEIS="`echo "$LINE" | cut -f 1 -d ' '`"
   LINKNAMEIS="`basename "$LINKNAMEIS"`"
   LINKPOINTSTO="`echo "$LINE" | cut -f 3 -d ' '`"
   echo "( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )"
   echo "( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )"
   COUNT=`expr $COUNT + 1`
   LINE="`sed -n "$COUNT p" $1`"
  done
}

create_file_list() {
  if [ -z "$1" ]; then
    param="."
  else
    param="$1"
  fi

  # zero length file
  > .FILELIST

  list=`ls -Rla $param | grep "./" | sed -e "s/://g"`

  FCOUNT=0
  DCOUNT=0
  for dir in $list;
  do
    if [ -d "$dir" ]; then
      let DCOUNT+=1
      for file in `ls $dir`;
      do
        if [ -f "$dir/$file" ]; then
          echo "$dir/$file" | sed -e "s/^\.\///" >> .FILELIST
          let FCOUNT+=1 
        fi
      done
    fi
  done

  usize="`du -s -h . | cut -f 1 -d $'\t'`"
  total_size="`echo -n "$usize"`"

  echo "uncompressed_size=$total_size" >> .PKGINFO
  echo "total_files=$FCOUNT" >> .PKGINFO
}

strip_description() {
  outfile=$1
  infile="./.DESCRIPTION"
  > $outfile
  LINENUMS="`cat $infile | grep -n -e "^$pkgname:" | cut -f 1 -d ':'`"
  if [ "$LINENUMS" = "" ]; then
    echo "WARNING: Description is empty or corrupted."
    return
  fi
  for LINENUM in $LINENUMS ; do
     LINE="`sed -n "$LINENUM p" $infile`"
     echo "$LINE" >> $outfile
  done
}

text_description() {
  outfile=$1
  infile="./.DESCRIPTION"

  echo ""  > $outfile
  echo "/* begin *" >> $outfile
  echo " " >> $outfile

  LINENUMS="`cat $infile | grep -n -e "^$pkgname:" | cut -f 1 -d ':'`"
  if [ "$LINENUMS" = "" ]; then
    echo "WARNING: Description is empty or corrupted."
    return
  fi
  for LINENUM in $LINENUMS ; do
     LINE="`sed -n "$LINENUM p" $infile | sed -e "s/^$pkgname:/  /" | sed -e "s/ $//g"`"
     echo "$LINE" >> $outfile
  done

  echo " * end */" >> $outfile
}


usage() {
  cat << EOF

Usage: $program [options] DESTDIR

Makes a "*.tgz" package containing the contents of the current and 
all subdirectories. If symbolic links exist, they will be removed
and an '.RESTORELINKS' script will be made to recreate them later.

The '$program' utility should be run in the PKG directory which contains
installed package by 'make DESTDIR=/pkg install', for example.
Before running the '$program' utility the install script ('.INSTALL')
and '.PKGINFO' files should be copyed into PKG directory.

Optionally current directory may contants '.DESCRIPTION' and
'.REQUIRES' files. The '$program' utility will add 'uncompressed_size' and
'total_files' variables (calculated at runtime) into .PKGINFO file.
Available options:

  -l, --linkadd {y|n}  - moves symlinks into .RESTORELINKS scrypt
                         ( recommended ).

EOF
}

remove_size_info() {
  infile="./.PKGINFO"
  tmpfile=`mktemp $TMP/info.XXXXXX`
  cat "$infile" | sed "/uncompressed_size/d" > $tmpfile && mv $tmpfile $infile
  cat "$infile" | sed "/total_files/d" > $tmpfile && mv $tmpfile $infile
  rm -f $tmpfile
}

remove_backslash_info() {
  infile="./.PKGINFO"
  sed '/^short_description=/ s/[\]\(.\)/\1/g' -i $infile
}


# Parse options
while [ 0 ]; do
  if [ "$1" = "--linkadd" -o "$1" = "-l" ]; then
    if [ "$2" = "yes" -o "$2" = "y" ]; then
      LINKADD=y
    elif [ "$2" = "no" -o "$2" = "n" ]; then
      LINKADD=n
    else
      usage
      exit 2
    fi
    shift 2
  elif [ "$1" = "-h" -o "$1" = "--help" -o $# = 0 ]; then
    usage
    exit 0
  else
    break
  fi
done


# Check needed files and variables:
if [ -r "./.PKGINFO" ]; then
  # if .PKGINFO contains size variables then remove its.
  # create_file_list() will add them later.
  remove_size_info
  # if .PKGINFO short_description contains backslashes then remove its.
  remove_backslash_info
  . ./.PKGINFO
else
  usage
  echo "ERROR: The file './.PKGINFO' is required for creating package."
  echo
  exit 1 
fi

if [ "$pkgname" = "" -o "$pkgver" = "" -o "$arch" = "" -o "$distroname" = "" -o "$distrover" = "" ]; then
  usage
  echo "ERROR: The file './.PKGINFO' should contains the declarations"
  echo "       of following variables:"
  echo "  pkgname    - name of package;"
  echo "  pkgver     - version such as 1.0.4, for example;"
  echo "  arch       - architecture of target machine {x86_64|i686|mipsel|arm|...};"
  echo "  distroname - name of distributive {slamd64|...};"
  echo "  distrover  - distributive version {12.2|...};"
  echo ""
  echo "Also optional variables are available:"
  echo "  group      - package group name {applications|libs|...};"
  echo "  url        - package home site. http://www.pkg.com, for example;"
  echo "  license    - LICENSE type {GPL|LGPL|BSD|Proprietary}."
  echo ""
  exit 1 
fi

if [ ! -e "./.INSTALL" ]; then
  usage
  echo "ERROR: The file './.INSTALL' is required for creating package."
  echo
  exit 1 
fi

echo
echo "Package maker, version 0.0.1."
PACKAGE_NAME="$pkgname-$pkgver-$arch-$distroname-$distrover.tgz"
PACKAGE_TEXT="$pkgname-$pkgver-$arch-$distroname-$distrover.txt"
SHA_SUM_NAME="$pkgname-$pkgver-$arch-$distroname-$distrover.sha256"
TARGET_DIR_NAME=$1
if [ "$TARGET_DIR_NAME" = "" ]; then
  TARGET_DIR_NAME="."
  echo "WARNING: DESTDIR is not defined. Use current directory."
fi
# add group directory to target dir:
if [ ! "$TARGET_DIR_NAME" = "" ]; then
  if [ ! "$group" = "" ]; then
    TARGET_DIR_NAME="$TARGET_DIR_NAME/$group"
  fi
fi
PACKAGE_NAME="`basename $PACKAGE_NAME`"
TAR_NAME="`basename $PACKAGE_NAME .tgz`"
echo
echo "Searching for symbolic links:"
# Get rid of possible pre-existing trouble:
INST=`mktemp $TMP/makepkg.XXXXXX`
# This requires the ls from coreutils-5.0 (or newer):
find . -type l -exec ls -l --time-style=long-iso {} \; | while read foo ; do echo $foo ; done | cut -f 8- -d ' ' | cut -b3- | tee $INST
if [ ! "`cat $INST`" = "" ]; then
  echo
  echo "Making symbolic link creation script:"
  make_install_script $INST | tee .RESTORELINKS
fi
echo
if [ ! "`cat $INST`" = "" ]; then
  if [ ! "$LINKADD" ]; then
    echo "It is recommended to remove the symbolic links and create the '.RESTORELINKS' script."
    echo
    echo "Would you like to make this stuff the '.RESTORELINKS' script for this package"
    echo -n "and remove the symbolic links ([y]es, [n]o)? "
    read LINKADD;
  fi
  if [ "$LINKADD" = "y" ]; then
    check_link_permissions
    if [ ! $? = 1 ]; then
      echo "ERROR: Removing links: Permission denied."
      exit 1
    fi
    echo
    echo "Removing symbolic links:"
    find . -type l -exec rm -v {} \;
    echo
  else
    rm -f .RESTORELINKS
  fi
else
  echo "No symbolic links were found, so we won't make an '.RESTORELINKS' script."
fi
rm -f $INST


create_file_list

# Strip comments in description file:
if [ -f .DESCRIPTION ]; then
  strip_description .description.tmp
  if [ -s .description.tmp ]; then
    mv .description.tmp .DESCRIPTION
  else
    rm -f .DESCRIPTION
  fi
fi


echo
echo "Creating tar file $TAR_NAME.tar..."
echo
$TAR --exclude="$TAR_NAME.tar" -cvf $TAR_NAME.tar `ls -A | tr '\n' ' '`

# Warn of zero-length files IS NOT OUR STYLE!:
#find . -type f -size 0c | while read file ; do
#  echo "WARNING: zero length file $(echo $file | cut -b3-)"
#done

# Warn of corrupt or empty gzip files:
find . -type f -name '*.gz' | while read file ; do
  if ! gzip -t $file 1> /dev/null 2> /dev/null ; then
    echo "WARNING: gzip test failed on $(echo $file | cut -b3-)"
  else
    if [ $(gzip -l $file | tail -n 1 | tr -s ' ' | cut -f 3 -d ' ') -eq 0 ]; then
      echo "WARNING: $(echo $file | cut -b3-) is an empty gzipped file"
    fi
  fi
done


echo
echo "Gzipping $TAR_NAME.tar..."
gzip -9 $TAR_NAME.tar
echo
echo "Renaming $TAR_NAME.tar.gz to $PACKAGE_NAME..."
mv $TAR_NAME.tar.gz $PACKAGE_NAME

text_description $PACKAGE_TEXT
sha256sum -b $PACKAGE_NAME > $SHA_SUM_NAME

if [ ! "$TARGET_DIR_NAME" = "." ]; then
  # ./errmsg$$ - is a unique temporary file
  mkdir -p "$TARGET_DIR_NAME" 2> ./errmsg$$
  if [ "$?" = "1" ]; then
    echo
    echo "ERROR: `cat ./errmsg$$`"
    echo "Find package in the current directory."
    echo
    rm -f ./errmsg$$
    exit 1
  fi
  rm -f ./errmsg$$
  echo
  echo "Moving $PACKAGE_NAME to $TARGET_DIR_NAME directory..."
  mv $PACKAGE_NAME $TARGET_DIR_NAME
  mv $PACKAGE_TEXT $TARGET_DIR_NAME
  mv $SHA_SUM_NAME $TARGET_DIR_NAME
fi
echo
echo "Package creation complete."
echo
