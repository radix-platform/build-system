#!/bin/sh
: ${DIALOG=dialog}

TAR=tar

# program name:
program=`basename $0`

# 13 = permission denied (should be root)
# 14 = there is no '.pkglist' file
# 16 = root path has not specified arter --root option
# 92 = Cannot create '/tmp/...' directory
# 99 = user abort from checklist mode
EXITSTATUS=0

CWD=`pwd`

TMP=$(mktemp -d /tmp/XXXXXXXX) || { echo "Cannot create '/tmp/...' directory" ; exit 92; }
trap "rm -rf $TMP" EXIT


usage() {
 cat << EOF

Usage: cd /pkg_tarballs_dir; $program

$program is used to install the set of packages using using '.pkglist' file
which placed  in the current directory.  The file '.pkglist' may be created
by make-pkglist utility.

options:
   --root /dest    - install someplace else, like /dest .
   --skip-requires - skip checking required packages;

EOF
}


print_without_priority() {
  pkglst=$1
  pkg=$2
  outfile=$3
  LINENUM="`cat $pkglst | grep -n -e "$pkg" | cut -f 1 -d ':'`"
  if [ ! "$LINENUM" = "" ]; then
    LINE="`sed -n "$LINENUM p" $pkglst`"
    pnam="`echo $LINE | cut -f 1 -d ':'`"
    pver="`echo $LINE | cut -f 2 -d ':'`"
    desc="`echo $LINE | cut -f 3 -d ':'`"
    ball="`echo $LINE | cut -f 4 -d ':'`"
    echo -n "$pnam:$pver:$desc:$ball:" >> $outfile
  fi
}

#
# Parse options:
#
while [ 0 ]; do
  if [ "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
  elif [ "$1" = "--skip-requires" ]; then
    SKIPREQUIRES="yes"
    shift 1
  elif [ "$1" = "--root" ]; then
    if [ "$2" = "" ]; then
      usage
      echo "ERROR: Target root path has not specified. Check --root option."
      EXITSTATUS=16
      exit $EXITSTATUS
    fi
    TARGET_ROOT_PATH="$2"
    shift 2
  else
    break
  fi
done

if [ "$TARGET_ROOT_PATH" = "" ]; then
  TARGET_ROOT_PATH="/"
else
  TARGET_ROOT_PATH="`echo "$TARGET_ROOT_PATH" | sed -e "s/\/$//"`/"
fi

if [ "$TARGET_ROOT_PATH" = "/" ]; then
  if [ ! $UID = "0" ]; then
    echo "ERROR: Trying to install into root directory: permission denied"
    EXITSTATUS=13
    exit $EXITSTATUS
  fi
fi

if [ ! -f $CWD/.pkglist ]; then
  echo "ERROR: There is no '.pkglist' file in the current directory."
  EXITSTATUS=14
  exit $EXITSTATUS
else
  PKGLIST=$CWD/.pkglist
fi

probe=`ls *.tgz > /dev/null 2>&1`
if [ ! "$?" = "0" ]; then
  usage
  echo "WARNING: There are not package tarballs in current directory."
  echo ""
  exit 0
fi

cat > $TMP/pkglst$$ << EOF
--colors \\
--backtitle "\Z6_kxLab, Inc.\Zn" \\
--title " \Z4SELECTING PACKAGES TO INSTALL\Zn " \\
--checklist "\\n\\
Please confirm the packages  you wish to install.  Use the UP/DOWN\\n\\
keys to scroll through the list, and the SPACE key to deselect any\\n\\
items you don't want to install.\\n\\n\\
Press ENTER when you are done." \\
12 70 2 \\
EOF

LISTOFPKGS=

# read lines from '$PKGLIST' file in original order:
LINENUMS=`sed -n "$=" $PKGLIST | tr '\n' '\0'`
LINENUM_REQ=1
while [ "$LINENUM_REQ" -le "$LINENUMS" ]; do
  LINE="`sed -n "$LINENUM_REQ p" $PKGLIST | tr '\n' '\0'`"
  let LINENUM_REQ+=1
  if [ ! -z "$LINE" -a -z "`echo $LINE | grep -n -e '^#' | cut -f 1 -d ':'`" ]; then
    pnam=`echo "$LINE" | cut -f 1 -d ':'`
    pkgtarball=`ls ./$pnam-*.tgz`
    if [ ! -z "$pnam" -a -f $pkgtarball ]; then
      pkgtarball=`basename $pkgtarball`
      desc="`echo $LINE | cut -f 3 -d ':'`"
      prio="`echo $LINE | cut -f 5 -d ':' | tr '\n' '\0'`"
      if   [ "$prio" = "required"    -o "$prio" = "req" -o "$prio" = "REQUIRED"    -o "$prio" = "REQ" ]; then
        ret="REQUIRED"
      elif [ "$prio" = "recommended" -o "$prio" = "rec" -o "$prio" = "RECOMMENDED" -o "$prio" = "REC" ]; then
        ret="RECOMMENDED"
      elif [ "$prio" = "optional"    -o "$prio" = "opt" -o "$prio" = "OPTIONAL"    -o "$prio" = "OPT" ]; then
        ret="OPTIONAL"
      elif [ "$prio" = "skip"        -o "$prio" = "skp" -o "$prio" = "SKIP"        -o "$prio" = "SKP" ]; then
        prio="SKIP"
      fi
      if [ ! "$prio" = "REQUIRED" -a ! "$prio" = "RECOMMENDED" -a ! "$prio" = "OPTIONAL" -a ! "$prio" = "SKIP" ]; then
        prio="SKIP"
      fi
      if [ "$prio" = "SKIP" ]; then
        continue
      fi

      echo -n "\"$pnam\" " >> $TMP/pkglst$$
      echo -n "\"$desc\" " >> $TMP/pkglst$$
      if [ "$prio" = "OPTIONAL" ]; then
        echo "off \\" >> $TMP/pkglst$$
      else
        echo "on  \\" >> $TMP/pkglst$$
      fi

      LISTOFPKGS="$LISTOFPKGS $pnam"
    fi
  fi
done

# remove last '\' symbol
cat $TMP/pkglst$$ | sed -e "$ s/[:\\:]//" > $TMP/pkglist$$


$DIALOG --file $TMP/pkglist$$ 2> $TMP/setofpkgs$$
if [ $? = 1 -o $? = 255 ]; then
  > $TMP/newpkglist$$
  for pkg in $LISTOFPKGS ; do
    # change all priorities to 'SKIP'
    print_without_priority $PKGLIST $pkg $TMP/newpkglist$$
    echo "SKIP" >> $TMP/newpkglist$$
  done
else
  > $TMP/newpkglist$$
  for pkg in $LISTOFPKGS ; do
    # place pkgs which founded in $TMP/pkglist$$
    # into $TMP/newpkglist$$ with 'REQUIRED' priority
    print_without_priority $PKGLIST $pkg $TMP/newpkglist$$
    if grep $pkg $TMP/setofpkgs$$ 1> /dev/null 2> /dev/null ; then
      echo "REQUIRED" >> $TMP/newpkglist$$
    else
      echo "SKIP" >> $TMP/newpkglist$$
    fi
  done
fi
rm -f $TMP/setofpkgs$$
rm -f $TMP/pkglist$$
rm -f $TMP/pkglst$$

# Exit if nothing was requested:
if grep REQUIRED $TMP/newpkglist$$ 1> /dev/null 2> /dev/null ; then
  true
else
  rm -f $TMP/newpkglist$$
  exit 99 # ABORT (there are not sellected packeges)!
fi

OPTIONS=
if [ "$SKIPREQUIRES" = "yes" ]; then
  OPTIONS="--skip-requires $OPTIONS"
fi

# tarballs from '$PKGLIST' file in original order:
PKGS=
LINENUMS=`sed -n "$=" $TMP/newpkglist$$ | tr '\n' '\0'`
LINENUM_REQ=1
while [ "$LINENUM_REQ" -le "$LINENUMS" ]; do
  LINE="`sed -n "$LINENUM_REQ p" $TMP/newpkglist$$ | tr '\n' '\0'`"
  let LINENUM_REQ+=1
  if [ ! -z "$LINE" -a -z "`echo $LINE | grep -n -e '^#' | cut -f 1 -d ':'`" ]; then
    pnam=`echo "$LINE" | cut -f 1 -d ':'`
    pkgtarball=`ls ./$pnam-*.tgz`
    if [ ! -z "$pnam" -a -f $pkgtarball ]; then
      pkgtarball=`basename $pkgtarball`
      PKGS="$PKGS $pkgtarball"
    fi
  fi
done

# Install the selected packages using new packages list $TMP/newpkglist$$:
for PKG in $PKGS ; do
  install-package $OPTIONS --root $TARGET_ROOT_PATH --infodialog --pkglist $TMP/newpkglist$$ $PKG
done
rm -f $TMP/newpkglist$$

$DIALOG --sleep 1 --colors \
        --backtitle "\Z6_kxLab, Inc.\Zn" \
        --title " \Z4Installing packages\Zn " \
        --infobox "\nDone installing packages.\n" 5 70

exit $EXITSTATUS
