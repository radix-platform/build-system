#!/usr/bin/perl

use IO::File;
use File::Basename;
use File::Copy;
use DirHandle;
use POSIX qw(tmpnam);

my $TMP = "/tmp";

my ( $target_root_path, $setup_db_path, $remove_deprecated_refs );
my ( @pkglogs );
my ( %by_pkg_name );

my $program = basename( $0 );

# initial values:
$setup_db_path = $target_root_path = "";


sub usage {
    print <<END;

Usage: $program [options]

options:
  -h, --help             display this help and exit;
  [ --root <path> ]      destination path ( default: / ),
                         the <path> should be absolute path;
  --rm-dep-refs, --rm-deprecated-refs
                         remove deprecated references if it is possible,
                         ( default: is not set ).

END
}

sub logfiles {
  my $dir = $_[0];
  my $dh = DirHandle->new( $dir ) or die "Cannot open dir $dir: $!\n";
  return sort
    grep { -f }        # regular files
     map { "$dir/$_" } # complete full path
    grep { !/^\./ }    # do not show hiden files
    $dh->read();       # read all
}

sub read_requires
{
  my $logfile = $_[0];
  my @requires;

  open( PKGLOG, "< $logfile" ) or die "Cannot open $logfile: $!\n";
  while( <PKGLOG> )
  {
    if( /REQUIRES:/ .. /PACKAGE DESCRIPTION:/ )
    {
      chomp;
      push( @requires, $_ );
    }
  }
  close( PKGLOG );

  shift( @requires ); # delete first element without save his value
    pop( @requires ); # delete  last element without save his value

  return @requires;
}

sub read_references
{
  my $logfile = $_[0];
  my @references;

  open( PKGLOG, "< $logfile" ) or die "Cannot open $logfile: $!\n";
  while( <PKGLOG> )
  {
    if( /REFERENCE COUNTER:/ .. /REQUIRES:/ )
    {
      chomp;
      push( @references, $_ );
    }
  }
  close( PKGLOG );

  shift( @references ); # delete first element without save his value
    pop( @references ); # delete  last element without save his value

  return @references;
}

sub read_name
{
  my $logfile = $_[0];
  my $name;

  open( PKGLOG, "< $logfile" ) or die "Cannot open $logfile: $!\n";
  while( <PKGLOG> )
  {
    if( /PACKAGE NAME:/ )
    {
      chomp;
      s/PACKAGE NAME: //;
      $name = $_;
    }
  }
  close( PKGLOG );

  return $name;
}

sub read_version
{
  my $logfile = $_[0];
  my $version;

  open( PKGLOG, "< $logfile" ) or die "Cannot open $logfile: $!\n";
  while( <PKGLOG> )
  {
    if( /PACKAGE VERSION:/ )
    {
      chomp;
      s/PACKAGE VERSION: //;
      $version = $_;
    }
  }
  close( PKGLOG );

  return $version;
}

sub rm_deprecated_ref
{
  my $log = $_[0];
  my $ref = $_[1];
  my ( $lineno_ref, $lineno_counter );

  $lineno_ref = $lineno_counter = 0;

  open( PKGLOG, "< $log" ) or die "Cannot open $log: $!\n";
  while( <PKGLOG> )
  {
    if( /REFERENCE COUNTER:/ ) { $lineno_counter = $.; }
    if( /REFERENCE COUNTER:/ .. /REQUIRES:/ )
    {
      chomp;
      if( $_ =~ m/$ref/ ) { $lineno_ref = $.; }
    }
  }
  close( PKGLOG );

  if( $lineno_counter != 0 && $lineno_ref != 0 )
  {
    my $fname, $fh;

    do { $fname = tmpnam() }
      until $fh = IO::File->new( "$fname", O_RDWR | O_CREAT | O_EXCL );
    $fh->autoflush( 1 ); # important!
    # we do not use unlink(): see move() at END.
    # END { unlink( $fname ) or die "Cannot unlink $fname: $!\n"; }

    open( PKGLOG, "< $log" ) or die "Cannot open $log: $!\n";
    while( <PKGLOG> )
    {
      if( /REFERENCE COUNTER: (\d+)/ )
      {
        my ( $new_ref, $line );
        chomp;
        $line = $_;
        $new_ref = $1; # $1 contains the ref counter digits: see (\d+) above.
        if( $new_ref != 0 ) { --$new_ref; $line = "REFERENCE COUNTER: $new_ref"; }
        print $fh "$line\n";
      }
      if( /REFERENCE COUNTER:/ .. /REQUIRES:/ )
      {
        chomp;
        if( $lineno_ref != $. && ! (/REFERENCE COUNTER:/) ) { print $fh "$_\n"; }
      }
      if( ! ( /REFERENCE COUNTER:/ .. /REQUIRES:/ ) ) { print $fh "$_"; }
    }
    close( PKGLOG );
    move( $fname, $log ) or die "Cannot move $fname to $log: $!\n";
    return 1;
  }
  return 0;
}

while( my $arg = shift )
{
  for( $arg )
  {
    if( /^-h$/ || /^--help$/ )
    {
      usage;
      exit 0;
    }
    elsif ( /^--rm-deprecated-refs$/ || /^--rm-dep-refs$/ )
    {
      $remove_deprecated_refs = "yes";
    }
    elsif ( /^--root$/)
    {
      $target_root_path = shift;
    }
    else
    {
      die "\nUnknown option: $arg\n\n";
    }
  }
}

if( $target_root_path eq "" ) { $target_root_path = "/"; }
if( $target_root_path ne "/" ) # add last / if not exist:
{
  if( ! ($target_root_path =~ m/\/$/ ) ) { $target_root_path .= "/"; }
}
$setup_db_path = "$target_root_path" . "var/log/_@DISTRO@/packages";


################################################################
# Main:
#
@pkglogs = logfiles( $setup_db_path );

# fill %by_pkg_name hash:
foreach my $pkglog ( @pkglogs )
{
  my @refs = read_references( $pkglog );
  my @reqs = read_requires( $pkglog );
  my $pnam = read_name( $pkglog );
  my $pver = read_version( $pkglog );

  $record =
  {
    NAME       => "$pnam",
    VERSION    => "$pver",
    PKGLOG     => "$pkglog",
    REQUIRES   => [ "" ],
    REFERENCES => [ "" ],
  };

  @{$record->{REQUIRES}}   = @reqs;
  @{$record->{REFERENCES}} = @refs;

  $by_pkg_name{ $record->{NAME}} = $record;
}


# REQUIRED PACKAGES:
# =================
printf "\nREQUIRED PACKAGES:\n";
while( ($name, $rec) = each %by_pkg_name )
{
  my @requires;

  @requires = @{$rec->{REQUIRES}};
  foreach my $rq ( @requires )
  {
    my ( $nm, $nv );
    ( $nm, $nv ) = split '=', $rq;
    if( ! ( $ret = $by_pkg_name{ "$nm" } ) )
    {
      printf "  $nm-$nv: is not installed.\n";
    }
  }
}
printf "\n";

# REFERENCES:
# ==========
printf "REFERENCES:\n";
my $deprecated = 0;
while( ($name, $rec) = each %by_pkg_name )
{
  my @references;

  @references = @{$rec->{REFERENCES}};
  foreach my $rf ( @references )
  {
    my ( $nm, $nv );
    ( $nm, $nv ) = split '=', $rf;
    if( ! ( $ret = $by_pkg_name{ "$nm" } ) )
    {
      ++$deprecated;
      if( $remove_deprecated_refs eq "yes" && rm_deprecated_ref( "$rec->{PKGLOG}", "$nm" ) )
      {
        printf "  $name-$rec->{VERSION}: remeved deprecated reference (created by package $nm-$nv).\n";
      }
      else
      {
        printf "  $nm-$nv: is not exist but references to $name-$rec->{VERSION}.\n";
      }
    }
  }
  if( $deprecated != 0 ) { printf "\n"; }
}
if( $deprecated == 0 ) { printf " (none)\n\n"; }
if( $remove_deprecated_refs ne "yes" && $deprecated != 0 )
{
  printf "To remove deprecated references try to run again with option '--rm-dep-refs',\n";
  printf "like follow:\n";
  printf "\n # $program --rm-dep-refs\n\n";
}

#
# End of Main:
################################################################
